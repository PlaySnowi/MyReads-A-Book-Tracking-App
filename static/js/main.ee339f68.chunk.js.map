{"version":3,"sources":["BooksAPI.js","Book.js","ListShelves.js","SearchBooks.js","App.js","serviceWorker.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","_this$props","this","props","currentShelf","shelfMoveBook","handleImage","imageLinks","thumbnail","react_default","a","createElement","className","style","width","height","backgroundImage","value","onChange","e","target","disabled","title","authors","Component","ListShelves","filter","map","key","src_Book","onMoveBook","Link","to","SearchBooks","state","searchedBooks","updateQuery","_this","setState","updateSearch","BooksAPI","error","_this2","_this$state","type","placeholder","searchedBook","BooksApp","moveBook","b","_this3","Route","exact","path","render","src_ListShelves","src_SearchBooks","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","basename","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee339f68.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Book extends Component {\n    static propTypes = {\n        book: PropTypes.object.isRequired ,\n        currentShelf: PropTypes.string.isRequired,\n        shelfMoveBook: PropTypes.func.isRequired\n    }\n\n    render() {\n\n        const {book, currentShelf, shelfMoveBook} = this.props\n        \n        let handleImage = book.imageLinks ? book.imageLinks.thumbnail : 'http://via.placeholder.com/128x193?text=N/A'\n\n        return (\n            <div className=\"book\">\n                <div className=\"book-top\">\n                    <div\n                        className=\"book-cover\"\n                        style={{ width: 128, height: 193, backgroundImage: `url(\"${handleImage}\")` }}>\n                    </div>\n                    <div className=\"book-shelf-changer\">\n                        <select\n                            value={currentShelf}\n                            onChange={e => shelfMoveBook(book, e.target.value)}\n                        >\n                            <option value=\"move\" disabled>Move to...</option>\n                            <option value=\"currentlyReading\">Currently Reading</option>\n                            <option value=\"wantToRead\">Want to Read</option>\n                            <option value=\"read\">Read</option>\n                            <option value=\"none\">None</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"book-title\">{book.title}</div>\n                <div className=\"book-authors\">{book.authors}</div>\n            </div>\n        )\n    }\n}\n\nexport default Book","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Book from './Book'\n\nfunction ListShelves(props) {\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>MyReads</h1>\n      </div>\n      <div className=\"list-books-content\">\n        <div>\n          <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Currently Reading</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n                  {props.books\n                      .filter(book => book.shelf === 'currentlyReading')\n                      .map(book => (\n                        <li key={book.id}>\n                          <Book\n                            book={book}\n                            shelfMoveBook={props.onMoveBook}\n                            currentShelf={book.shelf}\n                          />\n                        </li>\n                      ))\n                  }\n              </ol>\n            </div>\n          </div>\n          <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Want to Read</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n                  {props.books\n                      .filter(book => book.shelf === 'wantToRead')\n                      .map(book => (\n                        <li key={book.id}>\n                          <Book\n                            book={book}\n                            shelfMoveBook={props.onMoveBook}\n                            currentShelf={book.shelf}\n                          />\n                        </li>\n                      ))\n                  }\n              </ol>\n            </div>\n          </div>\n          <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Read</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n                  {props.books\n                      .filter(book => book.shelf === 'read')\n                      .map(book => (\n                        <li key={book.id}>\n                          <Book\n                            book={book}\n                            shelfMoveBook={props.onMoveBook}\n                            currentShelf={book.shelf}\n                          />\n                        </li>\n                      ))\n                  }\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"open-search\">\n        <Link\n          to=\"/search\"\n        >Add a book</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default ListShelves","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport * as BooksAPI from './BooksAPI'\nimport Book from './Book'\n\nclass SearchBooks extends Component {\n\n  static propTypes = {\n    books: PropTypes.array.isRequired,\n    onMoveBook: PropTypes.func.isRequired\n  }\n\n  state = {\n    query: '',\n    searchedBooks: []\n  }\n\n  updateQuery = query => {\n    this.setState({ query })\n    this.updateSearch(query)\n  }\n\n  updateSearch = query => {\n    if (query) {\n      BooksAPI.search(query).then(searchedBooks => {\n        if (searchedBooks.error) {\n          this.setState({ searchedBooks: [] })\n        } else {\n          this.setState({ searchedBooks })\n        }\n      })\n    } else {\n      this.setState({ searchedBooks: [] })\n    }\n  }\n\n  render() {\n\n    const {books, onMoveBook} = this.props\n    const {query, searchedBooks} = this.state\n\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link\n            className=\"close-search\"\n            to=\"/\"\n          >Close</Link>\n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              value={query}\n              onChange={(e) => this.updateQuery(e.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {searchedBooks.map(searchedBook => {\n              let shelf = 'none'\n\n              books.map(book => (\n                (book.id === searchedBook.id) && (shelf = book.shelf)\n              ))\n\n              return (\n                <li key={searchedBook.id}>\n                  <Book\n                    book={searchedBook}\n                    shelfMoveBook={onMoveBook}\n                    currentShelf={shelf}\n                  />\n                </li>\n              )\n            })}\n          </ol>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SearchBooks","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport * as BooksAPI from './BooksAPI'\nimport ListShelves from './ListShelves'\nimport SearchBooks from './SearchBooks'\nimport './App.css'\n\nclass BooksApp extends Component {\n  state = {\n    books: []\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll().then(books => {\n      this.setState({ books })\n    })\n  }\n\n  moveBook = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(() => {\n      book.shelf = shelf        \n      this.setState(state => ({\n        books: state.books.filter(b => b.id !== book.id).concat(book)\n      }))     \n    })\n  }\n\n  render() {\n\n    const {books} = this.state\n\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={() => (\n          <ListShelves\n            books={books}\n            onMoveBook={this.moveBook}\n          />\n        )}/>\n        <Route path='/search' render={() => (\n          <SearchBooks\n            books={books}\n            onMoveBook={this.moveBook}\n          />\n        )}/>\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter\n    basename=\"/MyReads-A-Book-Tracking-App\"\n  ><App /></BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}